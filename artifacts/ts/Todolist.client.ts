/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.23.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  InstantiateMsg,
  ExecuteMsg,
  Priority,
  Status,
  QueryMsg,
  EntryResponse,
  ListResponse,
  Entry,
} from "./Todolist.types";
export interface TodolistReadOnlyInterface {
  contractAddress: string;
  queryEntry: ({ id }: { id: number }) => Promise<EntryResponse>;
  queryList: ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: number;
  }) => Promise<ListResponse>;
}
export class TodolistQueryClient implements TodolistReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryEntry = this.queryEntry.bind(this);
    this.queryList = this.queryList.bind(this);
  }

  queryEntry = async ({ id }: { id: number }): Promise<EntryResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_entry: {
        id,
      },
    });
  };
  queryList = async ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: number;
  }): Promise<ListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_list: {
        limit,
        start_after: startAfter,
      },
    });
  };
}
export interface TodolistInterface extends TodolistReadOnlyInterface {
  contractAddress: string;
  sender: string;
  newEntry: (
    {
      description,
      priority,
    }: {
      description: string;
      priority?: Priority;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateEntry: (
    {
      description,
      id,
      priority,
      status,
    }: {
      description?: string;
      id: number;
      priority?: Priority;
      status?: Status;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  deleteEntry: (
    {
      id,
    }: {
      id: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  transferOwnerShip: (
    {
      newOwner,
    }: {
      newOwner: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class TodolistClient
  extends TodolistQueryClient
  implements TodolistInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.newEntry = this.newEntry.bind(this);
    this.updateEntry = this.updateEntry.bind(this);
    this.deleteEntry = this.deleteEntry.bind(this);
    this.transferOwnerShip = this.transferOwnerShip.bind(this);
  }

  newEntry = async (
    {
      description,
      priority,
    }: {
      description: string;
      priority?: Priority;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        new_entry: {
          description,
          priority,
        },
      },
      fee,
      memo,
      funds
    );
  };
  updateEntry = async (
    {
      description,
      id,
      priority,
      status,
    }: {
      description?: string;
      id: number;
      priority?: Priority;
      status?: Status;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_entry: {
          description,
          id,
          priority,
          status,
        },
      },
      fee,
      memo,
      funds
    );
  };
  deleteEntry = async (
    {
      id,
    }: {
      id: number;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        delete_entry: {
          id,
        },
      },
      fee,
      memo,
      funds
    );
  };
  transferOwnerShip = async (
    {
      newOwner,
    }: {
      newOwner: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        transfer_owner_ship: {
          new_owner: newOwner,
        },
      },
      fee,
      memo,
      funds
    );
  };
}
